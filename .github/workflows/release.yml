name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_kind:
        type: choice
        description: The type of release.
        default: prerelease
        required: true
        options:
          - prerelease
          - start-rc
          - stable
      publish:
        description: "True to publish release to git, vpm. if false, this creates release asset only"
        type: boolean
        required: false

env:
  PKG_NAME: com.anatawa12.liltoon-vat
  RELEASE_CHANGER: npm

concurrency:
  group: publish
  cancel-in-progress: true

permissions: write-all

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.update-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: anatawa12/something-releaser@v3
      - uses: snow-actions/git-config-user@v1.0.0

      - name: Update Version Name
        id: update-version
        run: |
          # set version name in properties file
          case "$RELEASE_KIND_IN" in
            "prerelease" )
              set-version "$(version-next "$(get-version)")"
              gh-export-variable PRERELEASE true
              ;;
            "start-rc" )
              set-version "$(version-set-channel "$(get-version)" rc)"
              gh-export-variable PRERELEASE true
              ;;
            "stable" )
              set-version "$(version-set-channel "$(get-version)" stable)"
              gh-export-variable PRERELEASE false
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN"
              exit 255
              ;;
          esac

          case "$GITHUB_REF_NAME" in
            master | master-* )
              echo "head is master or master-*"
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN is not allowd for $GITHUB_REF_NAME"
              exit 255
              ;;
          esac

          gh-export-variable VERSION "$(get-version)"
          gh-set-output version "$(get-version)"
        env:
          RELEASE_KIND_IN: ${{ github.event.inputs.release_kind }}

      - name: Commit & tag version
        if: ${{ inputs.publish }}
        run: |
          git commit -am "chore: bump version to $VERSION"
          git tag "v$VERSION"

      # region building
      - name: Prepare build folder
        run: mkdir build

      # region vpm release
      - name: Build VPM release
        run: |
          zip -r "build/$PKG_NAME-$VERSION.zip" . -x 'build*' '.*'
      - name: Upload VPM release
        uses: actions/upload-artifact@v4
        with:
          name: vpm-package
          path: build/${{ env.PKG_NAME }}-${{ env.VERSION }}.zip
      # endregion vpm release

      # endregion building

      - name: Publish Release
        if: ${{ inputs.publish }}
        run: |
          git push && git push origin "v$VERSION"

      - name: Publish release to github
        if: ${{ inputs.publish }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          sleep 1
          # upload release assets
          gh release create "v$VERSION" \
            ${{ fromJSON(env.PRERELEASE) && '--prerelease' || '' }} \
            --notes "version $VERSION" \
            "package.json" \
            "build/$PKG_NAME-$VERSION.zip" \

      - name: prepare next release & push
        if: inputs.publish && !fromJSON(env.PRERELEASE)
        run: |
          VERSION="$(version-next "$(get-version)")"
          set-version "$(version-set-channel "$VERSION" beta 0)"
          git commit -am "chore: prepare for next version: $VERSION"
          git push && git push --tags

  publish-vpm:
    uses: anatawa12/vpm.anatawa12.com/.github/workflows/update-package.yml@master
    needs: create-release
    if: inputs.publish
    with:
      version: ${{ needs.create-release.outputs.version }}
      environment: vpm.anatawa12.com
    secrets:
      TOKEN: ${{ secrets.VPM_GITHUB_PAT }}
